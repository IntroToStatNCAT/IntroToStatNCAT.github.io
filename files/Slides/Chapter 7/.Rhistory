se = sd(col_heights)/sqrt(43)
T_stat = qt(1.95/2, df = 42)
xbar - T_stat*se
xbar + T_stat*se
set.seed(123)
col_heights = rnorm(430, mean = 68, sd = 5.32)
hist(col_heights, xlab = "Height (inches)", main = "Histogram of college student heights")
xbar = mean(col_heights)
se = sd(col_heights)/sqrt(43)
T_stat = qt(1.95/2, df = 42)
xbar - T_stat*se
xbar + T_stat*se
?rnorm
set.seed(123)
col_heights = rnorm(n = 430, mean = 68, sd = 4.18)
hist(col_heights, xlab = "Height (inches)", main = "Histogram of college student heights")
xbar = mean(col_heights)
se = sd(col_heights)/sqrt(43)
T_stat = qt(1.95/2, df = 42)
xbar - T_stat*se
xbar + T_stat*se
set.seed(123)
col_heights = rnorm(n = 430, mean = 68, sd = 4.18)
hist(col_heights, xlab = "Height (inches)", main = "Histogram of college student heights")
xbar = mean(col_heights)
se = sd(col_heights)/sqrt(43)
T_stat = qt(1.95/2, df = 42)
xbar
sd(col_heights)
min(col_heights)
max(col_heights)
xbar - T_stat*se
xbar + T_stat*se
set.seed(123)
col_heights = rnorm(n = 430, mean = 68, sd = 4.18)
hist(col_heights, xlab = "Height (inches)", main = "Histogram of college student heights")
xbar = mean(col_heights)
se = sd(col_heights)/sqrt(43)
T_stat = qt(1.95/2, df = 42)
summary(col_heights)
xbar - T_stat*se
xbar + T_stat*se
set.seed(123)
col_heights = rnorm(n = 430, mean = 68, sd = 4.18)
hist(col_heights, xlab = "Height (inches)", main = "Histogram of college student heights")
xbar = mean(col_heights)
se = sd(col_heights)/sqrt(43)
T_stat = qt(1.95/2, df = 429)
summary(col_heights)
xbar - T_stat*se
xbar + T_stat*se
sd(col_heights)
set.seed(123)
col_heights = rnorm(n = 430, mean = 68, sd = 4.18)
hist(col_heights, xlab = "Height (inches)", main = "Histogram of college student heights")
xbar = mean(col_heights)
se = sd(col_heights)/sqrt(43)
T_stat = qt(1.95/2, df = 429)
summary(col_heights)
xbar - T_stat*se
xbar + T_stat*se
par(mar=c(2, 1, 1, 1), mgp=c(5, 0.6, 0))
plot(c(-3.5, 7), c(0, dnorm(0)), type='n', axes=FALSE)
axis(1, cex.axis = 0.75)
abline(h=0)
COL <- c('#000000FF', '#00000091', '#0000006F', '#0000004B', '#00000022')
DF <- c('normal', 10, 5, 2, 1)
X <- seq(-5, 8, 0.01)
Y <- dnorm(X)
lines(X, Y, col=COL[1])
for(i in 2:5){
Y <- dt(X, as.numeric(DF[i]))
lines(X, Y, col=COL[i])
}
legend('topright', legend=c(DF[1], paste('t, df=', DF[2:5], sep='')), col=COL, lty=rep(1, 5), bty = "n", cex = 0.85)
4.06/sqrt(430)
set.seed(123)
col_heights = rnorm(n = 430, mean = 68, sd = 4.18)
hist(col_heights, xlab = "Height (inches)", main = "Histogram of college student heights")
xbar = mean(col_heights)
se = sd(col_heights)/sqrt(43)
T_stat = qt(1.95/2, df = 429)
summary(col_heights)
xbar - T_stat*se
xbar + T_stat*se
sd(col_heights)
set.seed(123)
col_heights = rnorm(n = 430, mean = 68, sd = 4.18)
hist(col_heights, xlab = "Height (inches)", main = "Histogram of college student heights")
xbar = mean(col_heights)
se = sd(col_heights)/sqrt(430)
T_stat = qt(1.95/2, df = 429)
summary(col_heights)
xbar - T_stat*se
xbar + T_stat*se
68.07-66.3
1.77/0.196
qt((1+0.95)/2, df = 429)
pt(1.95/2)
qnorm(1.95/2)
qt((1+0.95)/2, df = 429)
68.07 + 1.97*0.196
68.07 - 1.97*0.196
set.seed(123)
col_heights = rnorm(n = 430, mean = 68, sd = 4.18)
hist(col_heights, xlab = "Height (inches)", main = "Histogram of college student heights")
xbar = mean(col_heights)
se = sd(col_heights)/sqrt(430)
T_stat = qt(1.95/2, df = 429)
summary(col_heights)
xbar - T_stat*se
xbar + T_stat*se
68.07-67
1.07/0.196
2 * pt(5.46, df = 429)
2*pt(5.46, df = 429)
2*pt(5.46, df = 429, lower.tail = FALSE)
knitr::opts_chunk$set(echo = FALSE)
set.seed(123)
col_heights = rnorm(n = 430, mean = 68, sd = 5)
hist(col_heights, xlab = "Height (inches)", main = "Histogram of college student heights")
set.seed(123)
col_heights = rnorm(n = 430, mean = 68, sd = 5)
hist(col_heights, xlab = "Height (inches)", main = "Histogram of college student heights")
summary(col_heights)
sd(col_heights)
knitr::opts_chunk$set(echo = FALSE)
set.seed(123)
col_heights = rnorm(n = 430, mean = 67, sd = 5)
hist(col_heights, xlab = "Height (inches)", main = "Histogram of college student heights")
set.seed(123)
col_heights = rnorm(n = 430, mean = 67, sd = 5)
hist(col_heights, xlab = "Height (inches)", main = "Histogram of college student heights")
summary(col_heights)
sd(col_heights)
2*pt(2.52, df=429)
2*pt(2.52, df=429, lower.tail = F)
2 * pt(2.52, df = 429, lower.tail = FALSE)
qt(p = (1+0.95)/3, df = 429)
qt(p = (1+0.95)/2, df = 429)
pt(q = -3.20, df = 29)
knitr::opts_chunk$set(echo = FALSE)
pt(q = -3.20, df = 29)
qt(p = 0.95, df = 29)
library(tidyverse)
arrange(desc(Sepal.Length)
iris %>%
library(dslabs)
iris %>%
iris %>%
iris %>%
group_by(Species) %>%
summarise(Min_SL = min(Sepal.Length),
Mean_SL = mean(Sepal.Length),
Med_SL = median(Sepal.Length),
Max_SL = max(Sepal.Length),
SD_SL = sd(Sepal.Length)) %>%
arrange(desc(Sepal.Length)
iris %>%
group_by(Species) %>%
summarise(Min_SL = min(Sepal.Length),
Mean_SL = mean(Sepal.Length),
Med_SL = median(Sepal.Length),
Max_SL = max(Sepal.Length),
SD_SL = sd(Sepal.Length)) %>%
arrange(desc(Sepal.Length))
iris %>%
group_by(Species) %>%
summarise(Min_SL = min(Sepal.Length),
Mean_SL = mean(Sepal.Length),
Med_SL = median(Sepal.Length),
Max_SL = max(Sepal.Length),
SD_SL = sd(Sepal.Length)) %>%
arrange(desc(Med_SL))
iris %>%
group_by(Species) %>%
summarise(Min_SL = min(Sepal.Length),
Mean_SL = mean(Sepal.Length),
Med_SL = median(Sepal.Length),
Max_SL = max(Sepal.Length),
SD_SL = sd(Sepal.Length)) %>%
arrange(desc(Med_SL))
x = data.frame(y = 1:10)
x[x$y>5]
x <- data.frame(z = 1:2)
y <- data.frame(z = 3)
rbind(x,y)
x = data.frame(y = 1:10)
x[x$y>5,]
subset(x, y > 5)
subset(x, y > 5 & y = 1)
subset(x, y > 5 & y == 1)
subset(x, (y > 5 & y == 1))
yy = y > 5 & y == 1
subset(x,yy )
25%%6
26%%6
26%/%6
23%/%6
3%*%6
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
set.seed(105)
m = 10000
n = 20
mu = 500
sigma = 100
alpha = 0.05
LCL = c()
UCL = c()
qt(1-alpha/2, df=(n-1))
for (j in 1:m){
x = rnorm(n, mu, sd=sigma) #samples are from normal (mu=500) distribution
LCL[j] = mean(x)-qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
UCL[j] = mean(x)-qt(alpha/2, df=(n-1))*sd(x)/sqrt(n)
#UCL[j] = mean(x)+qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n) #since t-dist is symmetric around 0
}
LCL
UCL
#indicator for whether the true parameter (mu=500) is contained in each of the calculated intervals
I = (LCL<=mu & mu<=UCL)
I
MC_CL = mean(I)
MC_CL
set.seed(105)
m = 10000 #number of Monte Carlo simulations
n = 20
mu = 1 #true mean
alpha = 0.05 #for 95% confidence level
LCL = c()
UCL = c()
for (j in 1:m){
x = rexp(n, rate=1) #samples are from Exp(1) distribution
LCL[j] = mean(x)-qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
UCL[j] = mean(x)-qt(alpha/2, df=(n-1))*sd(x)/sqrt(n)
#UCL[j] = mean(x)+qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
}
#indicator for whether the true parameter (mu=1) is contained in each of the calculated intervals
I = (LCL<=mu & mu<=UCL)
MC_CL = mean(I)
MC_CL
set.seed(105)
m = 10000
n = 10
mu = 500
sigma = 100
alpha = 0.05
LCL = c()
UCL = c()
for (j in 1:m){
x = rnorm(n, mu, sd=sigma) #samples are from normal (mu=500) distribution
LCL[j] = mean(x)-qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
UCL[j] = mean(x)-qt(alpha/2, df=(n-1))*sd(x)/sqrt(n)
#UCL[j] = mean(x)+qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n) #since t-dist is symmetric around 0
}
#indicator for whether the true parameter (mu=500) is contained in each of the calculated intervals
I = (LCL<=mu & mu<=UCL)
MC_CL = mean(I)
MC_CL
set.seed(105)
m = 10000 #number of Monte Carlo simulations
n = 10
mu = 1 #true mean
alpha = 0.05 #for 95% confidence level
LCL = c()
UCL = c()
for (j in 1:m){
x = rexp(n, rate=1) #samples are from Exp(1) distribution
LCL[j] = mean(x)-qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
UCL[j] = mean(x)-qt(alpha/2, df=(n-1))*sd(x)/sqrt(n)
#UCL[j] = mean(x)+qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
}
#indicator for whether the true parameter (mu=1) is contained in each of the calculated intervals
I = (LCL<=mu & mu<=UCL)
MC_CL = mean(I)
MC_CL
set.seed(105)
m = 10000 #number of Monte Carlo simulations
n = 30
mu = 1 #true mean
alpha = 0.05 #for 95% confidence level
LCL = c()
UCL = c()
for (j in 1:m){
x = rexp(n, rate=1) #samples are from Exp(1) distribution
LCL[j] = mean(x)-qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
UCL[j] = mean(x)-qt(alpha/2, df=(n-1))*sd(x)/sqrt(n)
#UCL[j] = mean(x)+qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
}
#indicator for whether the true parameter (mu=1) is contained in each of the calculated intervals
I = (LCL<=mu & mu<=UCL)
MC_CL = mean(I)
MC_CL
set.seed(105)
m = 10000 #number of Monte Carlo simulations
n = 100
mu = 1 #true mean
alpha = 0.05 #for 95% confidence level
LCL = c()
UCL = c()
for (j in 1:m){
x = rexp(n, rate=1) #samples are from Exp(1) distribution
LCL[j] = mean(x)-qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
UCL[j] = mean(x)-qt(alpha/2, df=(n-1))*sd(x)/sqrt(n)
#UCL[j] = mean(x)+qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
}
#indicator for whether the true parameter (mu=1) is contained in each of the calculated intervals
I = (LCL<=mu & mu<=UCL)
MC_CL = mean(I)
MC_CL
set.seed(105)
m = 10000 #number of Monte Carlo simulations
n = 200
mu = 1 #true mean
alpha = 0.05 #for 95% confidence level
LCL = c()
UCL = c()
for (j in 1:m){
x = rexp(n, rate=1) #samples are from Exp(1) distribution
LCL[j] = mean(x)-qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
UCL[j] = mean(x)-qt(alpha/2, df=(n-1))*sd(x)/sqrt(n)
#UCL[j] = mean(x)+qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
}
#indicator for whether the true parameter (mu=1) is contained in each of the calculated intervals
I = (LCL<=mu & mu<=UCL)
MC_CL = mean(I)
MC_CL
set.seed(105)
m = 10000 #number of Monte Carlo simulations
n = 20
mu = 1 #true mean
alpha = 0.05 #for 95% confidence level
LCL = c()
UCL = c()
for (j in 1:m){
x = rexp(n, rate=1) #samples are from Exp(1) distribution
LCL[j] = mean(x)-qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
UCL[j] = mean(x)-qt(alpha/2, df=(n-1))*sd(x)/sqrt(n)
#UCL[j] = mean(x)+qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
}
#indicator for whether the true parameter (mu=1) is contained in each of the calculated intervals
I = (LCL<=mu & mu<=UCL)
MC_CL = mean(I)
MC_CL
y=rchisq(1000,df=1)
plot(density(y))
set.seed(105)
m = 10000
n = 20
mu = 1
alpha = 0.05
LCL = c()
UCL = c()
for (j in 1:m){
x = rchisq(n, df=1) #samples are from chi^2(1) distribution
LCL[j] = mean(x)-qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
UCL[j] = mean(x)-qt(alpha/2, df=(n-1))*sd(x)/sqrt(n)
#UCL[j] = mean(x)+qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
}
#indicator for whether the true parameter (mu=1) is contained in each of the calculated intervals
I = (LCL<=mu & mu<=UCL)
MC_CL = mean(I)
MC_CL
set.seed(105)
m = 10000
n = 30
mu = 1
alpha = 0.05
LCL = c()
UCL = c()
for (j in 1:m){
x = rchisq(n, df=1) #samples are from chi^2(1) distribution
LCL[j] = mean(x)-qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
UCL[j] = mean(x)-qt(alpha/2, df=(n-1))*sd(x)/sqrt(n)
#UCL[j] = mean(x)+qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
}
#indicator for whether the true parameter (mu=1) is contained in each of the calculated intervals
I = (LCL<=mu & mu<=UCL)
MC_CL = mean(I)
MC_CL
set.seed(105)
m = 10000
n = 100
mu = 1
alpha = 0.05
LCL = c()
UCL = c()
for (j in 1:m){
x = rchisq(n, df=1) #samples are from chi^2(1) distribution
LCL[j] = mean(x)-qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
UCL[j] = mean(x)-qt(alpha/2, df=(n-1))*sd(x)/sqrt(n)
#UCL[j] = mean(x)+qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
}
#indicator for whether the true parameter (mu=1) is contained in each of the calculated intervals
I = (LCL<=mu & mu<=UCL)
MC_CL = mean(I)
MC_CL
set.seed(105)
m = 10000
n = 200
mu = 1
alpha = 0.05
LCL = c()
UCL = c()
for (j in 1:m){
x = rchisq(n, df=1) #samples are from chi^2(1) distribution
LCL[j] = mean(x)-qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
UCL[j] = mean(x)-qt(alpha/2, df=(n-1))*sd(x)/sqrt(n)
#UCL[j] = mean(x)+qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
}
#indicator for whether the true parameter (mu=1) is contained in each of the calculated intervals
I = (LCL<=mu & mu<=UCL)
MC_CL = mean(I)
MC_CL
set.seed(105)
m = 10000
n = 500
mu = 1
alpha = 0.05
LCL = c()
UCL = c()
for (j in 1:m){
x = rchisq(n, df=1) #samples are from chi^2(1) distribution
LCL[j] = mean(x)-qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
UCL[j] = mean(x)-qt(alpha/2, df=(n-1))*sd(x)/sqrt(n)
#UCL[j] = mean(x)+qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
}
#indicator for whether the true parameter (mu=1) is contained in each of the calculated intervals
I = (LCL<=mu & mu<=UCL)
MC_CL = mean(I)
MC_CL
set.seed(105)
m = 10000
n = 20
mu = 1
alpha = 0.05
LCL = c()
UCL = c()
for (j in 1:m){
x = rchisq(n, df=1) #samples are from chi^2(1) distribution
LCL[j] = mean(x)-qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
UCL[j] = mean(x)-qt(alpha/2, df=(n-1))*sd(x)/sqrt(n)
#UCL[j] = mean(x)+qt(1-alpha/2, df=(n-1))*sd(x)/sqrt(n)
}
#indicator for whether the true parameter (mu=1) is contained in each of the calculated intervals
I = (LCL<=mu & mu<=UCL)
MC_CL = mean(I)
MC_CL
qchisq(alpha, df=(n-1)
qchisq(alpha, df=(n-1)
qchisq(alpha, df=(n-1))
set.seed(105)
m = 10000
n = 20
mu = 0
sigma2 = 4
alpha = 0.05
UCL = c()
for (j in 1:m){
x = rnorm(n, 0, sd=sqrt(sigma2)) #samples are from N(0,2)
UCL[j] = (n-1)*var(x)/qchisq(alpha, df=(n-1))
}
#indicator for whether the true parameter (sigma2=4) is contained in each of the calculated intervals
I = (0<=sigma2 & sigma2<=UCL)
MC_CL = mean(I)
MC_CL
y=rchisq(1000,df=2)
plot(density(y))
#set.seed(105)
m = 10000
n = 20
mu = 2
sigma2 = 4
alpha = 0.05
UCL = c()
for (j in 1:m){
x = rchisq(n, df=2) #samples are from chisq(2) distribution
UCL[j] = (n-1)*var(x)/qchisq(alpha, df=(n-1))
}
#indicator for whether the true parameter (sigma2=4) is contained in each of the calculated intervals
I = (0<=sigma2 & sigma2<=UCL)
MC_CL = mean(I)
MC_CL
#set.seed(105)
m = 10000
n = 30
mu = 2
sigma2 = 4
alpha = 0.05
UCL = c()
for (j in 1:m){
x = rchisq(n, df=2) #samples are from chisq(2) distribution
UCL[j] = (n-1)*var(x)/qchisq(alpha, df=(n-1))
}
#indicator for whether the true parameter (sigma2=4) is contained in each of the calculated intervals
I = (0<=sigma2 & sigma2<=UCL)
MC_CL = mean(I)
MC_CL
#set.seed(105)
m = 10000
n = 100
mu = 2
sigma2 = 4
alpha = 0.05
UCL = c()
for (j in 1:m){
x = rchisq(n, df=2) #samples are from chisq(2) distribution
UCL[j] = (n-1)*var(x)/qchisq(alpha, df=(n-1))
}
#indicator for whether the true parameter (sigma2=4) is contained in each of the calculated intervals
I = (0<=sigma2 & sigma2<=UCL)
MC_CL = mean(I)
MC_CL
