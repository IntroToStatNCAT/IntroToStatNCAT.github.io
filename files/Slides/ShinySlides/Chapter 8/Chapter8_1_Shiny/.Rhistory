lmPlot(x, y, col = COL[1,2], lCol = COL[4], lwd = 3, cex = 2)
set.seed(238)
n <- c(50, 25, 78, 55, 70, 150)
m <- c(12, -4, 7, -19, 0, 40)
xr <- list(0.3, c(2), 1.42,
runif(4,1.45,1.55), 5.78, -0.6)
yr <- list(-4, c(-8), 19,
c(-17,-20,-21,-19), 12, -23.2)
i = 5
x <- runif(n[i])
y <- m[i]*x + rnorm(n[i])
x <- c(x,xr[[i]])
y <- c(y,yr[[i]])
par(mar=c(4,4,1,1), las=1, mgp=c(2.5,0.5,0), cex.lab = 1.25, cex.axis = 1.25, mfrow = c(2,1))
lmPlot(x[1:70], y[1:70], col = COL[1,2], lCol = COL[4], lwd = 3, xlim = range(x), ylim = range(y))
#abline(temp, lty = 3)
set.seed(238)
n <- c(50, 25, 78, 55, 70, 150)
m <- c(12, -4, 7, -19, 0, 40)
xr <- list(0.3, c(2), 1.42,
runif(4,1.45,1.55), 5.78, -0.6)
yr <- list(-4, c(-8), 19,
c(-17,-20,-21,-19), 12, -23.2)
i = 5
x <- runif(n[i])
y <- m[i]*x + rnorm(n[i])
x <- c(x,xr[[i]])
y <- c(y,yr[[i]])
par(mar=c(4,4,1,1), las=1, mgp=c(2.5,0.5,0), cex.lab = 2, cex.axis = 2, mfrow = c(2,1))
lmPlot(x[1:70], y[1:70], col = COL[1,2], lCol = COL[4], cex = 2,lwd = 3, xlim = range(x), ylim = range(y))
#abline(temp, lty = 3)
data(twins)
r = cor(twins$Foster, twins$Biological)
m1 = lm(twins$Foster ~ twins$Biological)
par(mar=c(4.5,4.5,0.5,0.5))
plot(twins$Foster ~ twins$Biological, xlab = "biological IQ", ylab = "foster IQ", pch = 20, col = COL[1,2], cex = 1.25, las = 1, cex.axis = 1.5, cex.lab = 1.5)
abline(m1, col = COL[4], lwd = 2)
text(paste("R = ", round(r,3)), x = 75, y = 125, cex = 1.5)
data(twins)
r = cor(twins$Foster, twins$Biological)
m1 = lm(twins$Foster ~ twins$Biological)
par(mar=c(4.5,4.5,0.5,0.5))
plot(twins$Foster ~ twins$Biological, xlab = "biological IQ", ylab = "foster IQ", pch = 20, col = COL[1,2], cex = 2, las = 1, cex.axis = 2, cex.lab = 2)
abline(m1, col = COL[4], lwd = 2)
text(paste("R = ", round(r,3)), x = 75, y = 125, cex = 2)
data(twins)
r = cor(twins$Foster, twins$Biological)
m1 = lm(twins$Foster ~ twins$Biological)
par(mar=c(4.5,4.5,0.5,0.5))
plot(twins$Foster ~ twins$Biological, xlab = "biological IQ", ylab = "foster IQ", pch = 20, col = COL[1,2], cex = 2, las = 1, cex.axis = 2, cex.lab = 2)
abline(m1, col = COL[4], lwd = 2)
text(paste("R = ", round(r,3)), x = 75, y = 125, cex = 1.9)
data(twins)
r = cor(twins$Foster, twins$Biological)
m1 = lm(twins$Foster ~ twins$Biological)
par(mar=c(4.5,4.5,0.5,0.5))
plot(twins$Foster ~ twins$Biological, xlab = "biological IQ", ylab = "foster IQ", pch = 20, col = COL[1,2], cex = 2, las = 1, cex.axis = 2, cex.lab = 2)
abline(m1, col = COL[4], lwd = 2)
text(paste("R = ", round(r,3)), x = 75, y = 125, cex = 1.6)
data(twins)
r = cor(twins$Foster, twins$Biological)
m1 = lm(twins$Foster ~ twins$Biological)
par(mar=c(4.5,4.5,0.5,0.5))
plot(twins$Foster ~ twins$Biological, xlab = "biological IQ", ylab = "foster IQ", pch = 20, col = COL[1,2], cex = 2, las = 1, cex.axis = 1.5, cex.lab = 1.5)
abline(m1, col = COL[4], lwd = 2)
text(paste("R = ", round(r,3)), x = 75, y = 125, cex = 1.5)
load("shpData10.RData")
knitr::opts_chunk$set(echo = FALSE)
U = c()
p = c()
for(thres in seq(0,1,0.01))
{
if (thres %in% c(0,1))
next
t = table(email$spam, g_full$fitted.values>thres)
FN = t[2,1]
FP = t[1,2]
TP = t[2,2]
TN = t[1,1]
U = c(U, TP + TN - 50 * FP - 5 * FN)
p = c(p,thres)
}
knitr::opts_chunk$set(echo = FALSE)
library(readr)
library(openintro)
library(here)
library(tidyverse)
library(xtable)
library(broom)
library(DAAG)
library(Sleuth3)
library(ROCR)
data(allbacks)
data(COL)
# scatterplot: weight vs. volume
m1 = lm(weight ~ volume, data = allbacks)
par(mar=c(4,4,1,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.7, cex.axis = 1.5)
plot(weight ~ volume, data = allbacks, pch = 19, col = COL[1,2], xlab = expression(volume~(cm^{3})), ylab = "weight (g)", cex = 2)
abline(m1, lwd = 3, col = COL[4])
text(x = 600, y = 1000, expression(paste(widehat(weight)," = 108 + 0.7 volume")), cex = 1.8, col = COL[1], pos = 1)
text(x = 600, y = 900, expression(paste(R^{2},"= 80%")), cex = 1.7, col = COL[1], pos = 1)
# scatterplot: weight vs. volume
m1 = lm(weight ~ volume, data = allbacks)
par(mar=c(4,4,1,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.7, cex.axis = 1.5)
plot(weight ~ volume, data = allbacks, pch = 19, col = COL[1,2], xlab = expression(volume~(cm^{3})), ylab = "weight (g)", cex = 2)
abline(m1, lwd = 3, col = COL[4])
text(x = 600, y = 1000, expression(paste(widehat(weight)," = 108 + 0.7 volume")), cex = 1.8, col = COL[1], pos = 1)
text(x = 600, y = 900, expression(paste(R^{2},"= 80%")), cex = 1.7, col = COL[1], pos = 1)
summary(m1)
# scatterplot: weight vs. volume and cover
ch = rep(NA, dim(allbacks)[1])
ch[allbacks$cover == "hb"] = 15
ch[allbacks$cover == "pb"] = 17
color = rep(NA, dim(allbacks)[1])
color[allbacks$cover == "hb"] = COL[1,2]
color[allbacks$cover == "pb"] = COL[2,2]
par(mar=c(4,4,0.25,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.8, cex.axis = 1.25)
plot(weight ~ volume, data = allbacks, col = color, xlab = expression(volume~(cm^{3})), ylab = "weight (g)", pch = ch, cex = 2)
legend("topleft", inset = 0.05, c("hardcover","paperback"), col = c(COL[1,2],COL[2,2]), pch = c(15,17), cex = 1.8)
# scatterplot: weight vs. volume and cover
ch = rep(NA, dim(allbacks)[1])
ch[allbacks$cover == "hb"] = 15
ch[allbacks$cover == "pb"] = 17
color = rep(NA, dim(allbacks)[1])
color[allbacks$cover == "hb"] = COL[1,2]
color[allbacks$cover == "pb"] = COL[2,2]
par(mar=c(4,4,0.25,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.8, cex.axis = 1.25)
plot(weight ~ volume, data = allbacks, col = color, xlab = expression(volume~(cm^{3})), ylab = "weight (g)", pch = ch, cex = 2)
legend("topleft", inset = 0.05, c("hardcover","paperback"), col = c(COL[1,2],COL[2,2]), pch = c(15,17), cex = 1.8)
m2 <- lm(weight ~ volume + cover, data = allbacks)
summary(m2)
# scatterplot: weight vs. volume and cover with lines
par(mar=c(4,4,0.25,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.8, cex.axis = 1.25)
plot(weight ~ volume, data = allbacks, col = color, xlab = expression(volume~(cm^{3})), ylab = "weight (g)", pch = ch, cex = 3)
legend("topleft", inset = 0.05, c("hardcover","paperback"), col = c(COL[1,2],COL[2,2]), pch = c(15,17), cex = 1.8)
abline(a = m2$coefficients[1], b = m2$coefficients[2], col = COL[1], lwd = 2)
abline(a = m2$coefficients[1] + m2$coefficients[3], b = m2$coefficients[2], col = COL[2], lwd = 2, lty = 2.5)
poverty = read.table("poverty.txt", h = T, sep = "\t")
# rename columns
names(poverty) = c("state", "metro_res", "white", "hs_grad", "poverty", "female_house")
# reorder columns
poverty = poverty[,c(1,5,2,3,4,6)]
# pairs plot
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...){
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
rreal = cor(x, y)
txtreal <- format(c(rreal, 0.123456789), digits=digits)[1]
txt <- format(c(r, 0.123456789), digits=digits)[1]
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txtreal, cex = 3 * cex.cor * r)
}
pairs(poverty[,c(2:6)], lower.panel = panel.cor, pch = 19, col = COL[1,2], cex = 1.5, cex.labels = 1.6, cex.axis = 1.5)
# poverty vs. female_house
pov_slr = lm(poverty ~ female_house, data = poverty)
par(mar=c(4,4,1,1), las=1, mgp=c(2.5,0.7,0), cex.lab = 2, cex.axis = 1.5)
plot(poverty$poverty ~ poverty$female_house, ylab = "% in poverty", xlab = "% female householder", pch=19, col=COL[1,2], cex = 2)
abline(pov_slr, col = COL[4], lwd = 4)
pairs(poverty[,c(2:6)], lower.panel = panel.cor, pch = 19, col = COL[1,2], cex = 1.5, cex.labels = 1.6, cex.axis = 1.5)
d = read.csv(file = "beauty.csv")
###############################################################################
# Do more beautiful profs get higher evaluations?
###############################################################################
# lm: beauty
beauty_profeval = lm(profevaluation ~ beauty, data = d)
par(mar=c(4,4,0.5,0.5))
plot(x = d$beauty, y = d$profevaluation, xlab="beauty", ylab="professor evaluation", pch = 19, col = COL[1,2], cex = 1, cex.lab = 1.5)
abline(beauty_profeval, col = COL[4], lwd = 4)
# lm: beauty + gender
d$pch = NA
d$col = NA
d$pch[d$gender == "male"] = 15
d$col[d$gender == "male"] = COL[1,2]
d$pch[d$gender == "female"] = 17
d$col[d$gender == "female"] = COL[2,2]
par(mar=c(4,4,0.5,0.5), las=1, mgp=c(3,0.7,0), cex.lab = 1.5, cex.axis = 1.5)
plot(d$profevaluation ~ d$beauty, pch = d$pch, col = d$col, xlab="beauty", ylab="professor evaluation")
legend("bottomright", c("male","female"), col = c(COL[1,2],COL[2,2]), pch = c(15,17), cex = 1.5, inset = 0.05)
# full model
m = lm(profevaluation ~ beauty + gender + age + formal + lower + native + minority + students + tenure, data = d)
summary(m)
d = read.csv(file = "beauty.csv")
# final model
m_final = lm(profevaluation ~ beauty + gender + age + formal + native + tenure, data = d)
# nearly normal residuals
par(mar=c(2,4,2,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.5, cex.main = 2, cex.axis = 1.25)
hist(m_final$residuals, main = "Histogram of residuals", col = COL[1])
par(mar=c(4,4,2,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.5, cex.main = 1.25,cex.axis = 1.25, mfrow = c(1,2))
plot(m_final$residuals ~ m_final$fitted, main = "Residuals vs. fitted", pch = 19, col = COL[1,2], ylab = "residuals", xlab = "fitted", cex = 2)
abline(h = 0, lty = 3, lwd = 4)
plot(abs(m_final$residuals) ~ m_final$fitted, main = "Absolute value of residuals vs. fitted", pch = 19, col = COL[1,2], ylab = "abs(residuals)", xlab = "fitted", cex = 2)
par(mar=c(4,4,2,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.5, cex.axis = 1.25, mfrow = c(1,1))
plot(m_final$residuals, main = "Residuals vs. order of data collection", pch = 19, col = COL[1,2], ylab = "residuals", xlab = "order of data collection", cex = 2)
abline(h = 0, lty = 3, lwd = 4)
par(mar=c(4,4,1,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.8, cex.axis = 1.25, mfrow = c(1,2))
plot(m_final$residuals ~ d$beauty, pch = 19, col = COL[1,2], xlab = "beauty", ylab = "professor evaluation", cex = 2)
abline(h = 0, lty = 3, lwd = 4)
plot(m_final$residuals ~ d$age, pch = 19, col = COL[1,2], xlab = "age", ylab = "professor evaluation", cex = 2)
abline(h = 0, lty = 3, lwd = 6)
donner = case2001
par(mar=c(2,4,2,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.25, cex.axis = 1.25)
boxplot(donner$Age ~ donner$Status, xlab = "", ylab = "", cex.axis = 1.5)
g1=glm(Status~Age, data=donner, family=binomial)
summary(g1)
g=glm(Status~Age+Sex, data=donner, family=binomial)
par(mar=c(2,4,2,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.5, cex.axis = 1.25)
plot(donner$Age,as.numeric(donner$Status)-1+0.01*((as.numeric(donner$Sex)-1)*2-1),xlab="Age",ylab="Status",xlim=c(0,80),pch=c(15,17)[donner$Sex], col = c(COL[1,2], COL[2,2]), cex = 2)
legend("topright",c("Male","Female"),pch=c(15,17), col = c(COL[1,2], COL[2,2]), cex = 2, inset = 0.025)
par(mar=c(2,4,2,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.5, cex.axis = 1.25)
plot(donner$Age,as.numeric(donner$Status)-1+0.01*((as.numeric(donner$Sex)-1)*2-1),xlab="Age",ylab="Status",xlim=c(0,80),pch=c(15,17)[donner$Sex], col = c(COL[1,2], COL[2,2]), cex = 2)
x=0:80
p = predict(g1,newdata=data.frame(Age=x))
lines(x,exp(p)/(1+exp(p)), col = COL[4], lwd = 4)
p1 = exp(p[1])/(1 + exp(p[1]))
p2 = exp(p[26])/(1 + exp(p[26]))
p3 = exp(p[51])/(1 + exp(p[51]))
points(x = c(0,25,50), y = c(p1,p2,p3), col = COL[4], pch = 19, cex = 2)
legend("topright",c("Male","Female"),pch=c(15,17), col = c(COL[1,2], COL[2,2]), cex = 2, inset = 0.025)
g=glm(Status~Age+Sex, data=donner, family=binomial)
summary(g)
par(mar=c(2,4,2,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.5, cex.axis = 1.25)
plot(donner$Age,as.numeric(donner$Status)-1+0.01*((as.numeric(donner$Sex)-1)*2-1),xlab="Age",ylab="Status",xlim=c(0,80),pch=c(15,17)[donner$Sex], col = c(COL[1,2], COL[2,2]), cex = 2)
x=0:80
p_male = predict(g,newdata=data.frame(Age=x,Sex="Male"))
p_female = predict(g,newdata=data.frame(Age=x,Sex="Female"))
lines(x,exp(p_male)/(1+exp(p_male)), col = COL[1], lwd = 4)
lines(x,exp(p_female)/(1+exp(p_female)), col = COL[2], lwd = 2, lty = 4)
legend("topright",c("Male","Female"),pch=c(15,17), col = c(COL[1,2], COL[2,2]), inset = 0.025, cex = 2)
text(x = 45, y = 0.7, "Female", col = COL[2], cex = 2)
text(x = 20, y = 0.3, "Male", col = COL[1], cex = 2)
g=glm(Status~Age+Sex, data=donner, family=binomial)
summary(g)
birds = case2002
birds$pch = NA
birds$pch[birds$LC == "LungCancer" & birds$BK == "Bird"] = 17
birds$pch[birds$LC == "LungCancer" & birds$BK == "NoBird"] = 16
birds$pch[birds$LC == "NoCancer" & birds$BK == "Bird"] = 2
birds$pch[birds$LC == "NoCancer" & birds$BK == "NoBird"] = 1
birds$col[birds$LC == "LungCancer"] = COL[2,2]
birds$col[birds$LC == "NoCancer"] = COL[1,2]
# birds
par(mar=c(2,4,2,1), las=1, mgp=c(3,0.7,0), cex.lab = 1.5, cex.axis = 1.25)
plot(YR~AG, data = birds, pch = birds$pch, col = birds$col, lwd = 2)
summary(glm(LC ~ FM + SS + BK + AG + YR + CD, data=birds, family=binomial))
# odds ratios
p = (1:99)/100
f = function(p) (3.91 * p/(1-p))/(1+3.91 * p/(1-p))
par(mar=c(5, 4, 2, 2) + 0.1)
plot(p,f(p),xlab="P(lung cancer | no birds)",ylab="P(lung cancer | birds)",type="l", cex.axis = 1.5, cex.lab = 1.5, lwd = 4)
abline(a=0,b=1,col='lightgrey', lwd = 4)
# odds ratios
par(mar=c(5, 4, 2, 2) + 0.1)
plot(p,f(p),xlab="P(lung cancer | no birds)",ylab="P(lung cancer | birds)",type="l", cex.axis = 1.5, cex.lab = 1.5, lwd = 4)
abline(a=0,b=1,col='lightgrey', lwd = 4)
points(0.05,f(0.05),col='red',pch=16, cex = 2)
lines(c(0.05,0.05),c(0,f(0.05)),col='red', lwd = 4)
# odds ratios
par(mar=c(5, 4, 2, 2) + 0.1)
plot(p,f(p),xlab="P(lung cancer | no birds)",ylab="P(lung cancer | birds)",type="l", cex.axis = 1.5, cex.lab = 1.5, lwd = 4)
abline(a=0,b=1,col='lightgrey', lwd = 4)
points(0.05,f(0.05),col='red',pch=16, cex = 2)
lines(c(0.05,0.05),c(0,f(0.05)),col='red', lwd = 4)
lines(c(-1,0.05),c(f(0.05),f(0.05)),col='red', lwd = 4)
par(mar=c(5, 4, 2, 2) + 0.1)
g_full = glm(spam ~ ., data=email, family=binomial)
pred = prediction(g_full$fitted.values, email$spam)
perf = performance(pred,"tpr","fpr")
plot(perf, lwd = 4, cex.lab = 1.5)
abline(a=0,b=1,col="lightgrey", lwd = 4)
g_refined = glm(spam ~ to_multiple+cc+image+attach+winner+password+line_breaks+format+re_subj+urgent_subj+exclaim_mess, data=email, family=binomial)
summary(g_refined)
pred_full = prediction( g_full$fitted.values, email$spam)
pred_refined = prediction( g_refined$fitted.values, email$spam)
aucs = round(c(performance(pred_full,"auc")@y.values[[1]], performance(pred_refined,"auc")@y.values[[1]]),3)
par(mar=c(5, 4, 2, 2) + 0.1, cex.lab = 1.5)
plot(performance(pred_full,"tpr","fpr"), lwd = 4)
plot(performance(pred_refined,"tpr","fpr"),add=TRUE, col=COL[1], lwd = 4)
legend("bottomright",paste0(c("Full","Refined"), " (AUC: ",aucs,")"),col=c("black",COL[1]), lwd = 2, lty=1, cex = 1.5)
abline(a=0,b=1,col="lightgrey", lwd = 4)
U = c()
p = c()
for(thres in seq(0,1,0.01))
{
if (thres %in% c(0,1))
next
t = table(email$spam, g_full$fitted.values>thres)
FN = t[2,1]
FP = t[1,2]
TP = t[2,2]
TN = t[1,1]
U = c(U, TP + TN - 50 * FP - 5 * FN)
p = c(p,thres)
}
par(mar=c(5, 4, 2, 2) + 0.1)
plot(U ~ p,type='l', lwd = 4, cex.lab = 1.5)
points(0.75,1422,col=COL[4],cex = 2, lwd = 3)
par(mar=c(5, 4, 2, 2) + 0.1)
plot(U[p>0.6] ~ p[p>0.6],type='l', lwd = 4, cex.lab = 1.5)
points(0.75,1422,col=COL[4],cex = 2, lwd = 3)
par(mar=c(5, 4, 2, 2) + 0.1)
plot(U[p>0.6] ~ p[p>0.6],type='l', lwd = 4, cex.lab = 1.5)
points(0.75,1422,col=COL[4],cex = 2, lwd = 2)
par(mar=c(5, 4, 2, 2) + 0.1)
plot(U[p>0.6] ~ p[p>0.6],type='l', lwd = 4, cex.lab = 1.5)
points(0.754,1422,col=COL[4],cex = 2, lwd = 3)
par(mar=c(5, 4, 2, 2) + 0.1)
plot(U[p>0.6] ~ p[p>0.6],type='l', lwd = 4, cex.lab = 1.5)
points(0.7535,1422,col=COL[4],cex = 2, lwd = 3)
par(mar=c(5, 4, 2, 2) + 0.1)
plot(U[p>0.6] ~ p[p>0.6],type='l', lwd = 4, cex.lab = 1.5)
points(0.7535,1422,col=COL[4],cex = 2, lwd = 3)
i=which.max(U)
points(p[i],U[i],col=COL[1],pch=16,cex = 2, lwd = 3)
knitr::opts_chunk$set(echo = FALSE)
data(COL)
par(mar=c(4,4,1,1), las=1, mgp=c(2.5,0.5,0), cex.lab = 2, cex.axis = 2, mfrow = c(2,1))
lmPlot(x = poverty$Graduates, y = poverty$Poverty, highlight = c(9,40), hlCol = c(COL[4],COL[2]), hlPch = c(15,17), col = COL[1,2], ylab = "% in poverty", xlab = "% HS grad", lCol = COL[4], cex = 2,lwd = 3, xAxis = 4)
library(readr)
library(openintro)
library(here)
library(tidyverse)
library(xtable)
library(broom)
library(faraway)
data(COL)
data(COL)
par(mar=c(4,4,1,1), las=1, mgp=c(2.5,0.5,0), cex.lab = 2, cex.axis = 2, mfrow = c(2,1))
lmPlot(x = poverty$Graduates, y = poverty$Poverty, highlight = c(9,40), hlCol = c(COL[4],COL[2]), hlPch = c(15,17), col = COL[1,2], ylab = "% in poverty", xlab = "% HS grad", lCol = COL[4], cex = 2,lwd = 3, xAxis = 4)
library(readr)
library(openintro)
library(here)
library(tidyverse)
library(xtable)
library(broom)
library(faraway)
data(COL)
poverty = read.table("poverty.txt", header = T, sep = "\t")
data(COL)
par(mar=c(4,4,1,1), las=1, mgp=c(2.5,0.5,0), cex.lab = 2, cex.axis = 2, mfrow = c(2,1))
lmPlot(x = poverty$Graduates, y = poverty$Poverty, highlight = c(9,40), hlCol = c(COL[4],COL[2]), hlPch = c(15,17), col = COL[1,2], ylab = "% in poverty", xlab = "% HS grad", lCol = COL[4], cex = 2,lwd = 3, xAxis = 4)
?lmPlot
data(COL)
par(mar=c(4,4,1,1), las=1, mgp=c(2.5,0.5,0), cex.lab = 2, cex.axis = 2, mfrow = c(2,1))
lmPlot(x = poverty$Graduates, y = poverty$Poverty, highlight = c(9,40), hlCol = c(COL[4],COL[2]), hlPch = c(15,17), col = COL[1,2], ylab = "% in poverty", xlab = "% HS grad", lCol = COL[4], cex = 2,lwd = 3, xAxis = 4)
library(MASS)
data("Cars93")
Cars93 %>%
cor()
library(tidyverse)
Cars93 %>%
cor()
install.packages("corrr")
#install.packages("corrr")
library(corrr)
Cars93 %>%
correlate()
View(Cars93)
Cars93 %>%
select(5,7:8,11:14) %>%
correlate()
Cars93 %>%
select(5,7:8,12:15) %>%
correlate()
Cars93 %>%
select(5,7:8,12:15) %>%
cor()
Cars93 %>%
select(5,7:8,12:15) %>%
cor() %>%
round(2)
Cars93 %>%
select(5,7:8,12:15) %>%
ggpairs()
Cars93 %>%
select(5,7:8,12:15) %>%
plotmatrix()
install.packages("GGally")
#install.packages("GGally")
library(GGally)
Cars93 %>%
select(5,7:8,12:15) %>%
ggpairs()
cars93 = Cars93 %>%
select(5,7:8,12:15)
mod = lm(Price ~ . , data = cars93)
summary(mod)
knitr::opts_chunk$set(echo = TRUE)
library(boot)
#check the structure and arguments of the boot function
?boot
#Generating the sample (in practice, this will be the given data)
set.seed(101)
n = 20
mu = 500
sigma2 = 100^2
x = rnorm(n, mu, sd=sqrt(sigma2))
x
s2mle = function(x, i){ #x is the data, i is for each bootstrap replicate
n = length(x)
return(sum((x[i]-mean(x[i]))^2)/n)
}
set.seed(201) #to make boot produce same results when it is rerun
boot(data=x, statistic=s2mle) #R=B
set.seed(201) #to make boot produce same results when it is rerun
boot(data=x, statistic=s2mle, R=1000) #R=B
#install.packages("bootstrap")
library(bootstrap)
data(law)
law
View(law)
r = cor(law$LSAT, law$GPA)
r
plot(law)
r
B = 1000 #number of bootstrap replicates
r.star = c()
s = sample(1:nrow(law), size=nrow(law), replace=T)
i=1
s
law$LSAT[s]
law$GPA[s]
cor(law$LSAT[s], law$GPA[s])
B = 1000 #number of bootstrap replicates
r.star = c()
for (i in 1:B){
s = sample(1:nrow(law), size=nrow(law), replace=T)
r.star[i] = cor(law$LSAT[s], law$GPA[s])
}
r.star
hist(r.star)
bias.r = mean(r.star-r)
se.r=sd(r.star)
c(bias.r, se.r)
r-1.96*se.r
r-1.96*se.r
r+1.96*se.r
c(r-1.96*se.r,
r+1.96*se.r)
hist(r.star)
c(r-1.96*se.r,
r+1.96*se.r)
#function that computes the statistic r
r.f = function(x, i){
cor(x[i,1], x[i,2])
}
set.seed(301) #to make the boot function reproduce same results when re-run
r.boot = boot(data=law, statistic=r.f, R=1000)
r.boot
c(bias.r, se.r)
B = 1000 #number of bootstrap replicates
r.star = c()
for (i in 1:B){
s = sample(1:nrow(law), size=nrow(law), replace=T)
r.star[i] = cor(law$LSAT[s], law$GPA[s])
}
hist(r.star)
bias.r = mean(r.star-r)
se.r=sd(r.star)
c(bias.r, se.r)
c(r-1.96*se.r,
r+1.96*se.r)
set.seed(301) #to make the boot function reproduce same results when re-run
r.boot = boot(data=law, statistic=r.f, R=1000)
r.boot
set.seed(301) #to make the boot function reproduce same results when re-run
r.boot = boot(data=law, statistic=r.f, R=1000)
r.boot
set.seed(301) #to make the boot function reproduce same results when re-run
r.boot = boot(data=law, statistic=r.f, R=1000)
r.boot
set.seed(301) #to make the boot function reproduce same results when re-run
r.boot = boot(data=law, statistic=r.f, R=1000)
r.boot
set.seed(301) #to make the boot function reproduce same results when re-run
r.boot = boot(data=law, statistic=r.f, R=1000)
r.boot
set.seed(301) #to make the boot function reproduce same results when re-run
r.boot = boot(data=law, statistic=r.f, R=1000)
r.boot
B = 1000 #number of bootstrap replicates
r.star = c()
for (i in 1:B){
set.seed(i+100)
s = sample(1:nrow(law), size=nrow(law), replace=T)
r.star[i] = cor(law$LSAT[s], law$GPA[s])
}
hist(r.star)
bias.r = mean(r.star-r)
se.r=sd(r.star)
c(bias.r, se.r)
c(r-1.96*se.r,
r+1.96*se.r)
B = 1000 #number of bootstrap replicates
r.star = c()
for (i in 1:B){
set.seed(i+100)
s = sample(1:nrow(law), size=nrow(law), replace=T)
r.star[i] = cor(law$LSAT[s], law$GPA[s])
}
hist(r.star)
bias.r = mean(r.star-r)
se.r=sd(r.star)
c(bias.r, se.r)
c(r-1.96*se.r,
r+1.96*se.r)
r.boot$t0
r.boot$t
hist(r.boot$t)
r.boot
#look at the bootstrap estimate of the sampling distribution of r
hist(r.boot$t, main="Bootstrap estimate of the sampling distribution of r", xlab="r*")
