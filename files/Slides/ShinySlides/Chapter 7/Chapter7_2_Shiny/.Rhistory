# Set up simulation settings
N    <- 10000                 #population size
n <- c(10, 25, 50)
mx   <- my <- 10              #population means of X and Y vars
# set seed for reproducibility
set.seed(123)
# set parameters
CVx <- c(1/3, 1/2)      #population coefficient of variation for X (Sx/mx)
CVy <- c(1/4, 1/3)      #population coefficient of variation for Y (Sy/my)
rho <- c(0.60, 0.80)
n <- c(10, 25, 50)
# Set up simulation settings
nreps <- 10000  # number of repeated samples
library(RSSampling)
N <- 100
X <- rnorm(N)
Y <- rnorm(N)
pop = cbind(X,Y)
# create a data frame to store the results
results <- data.frame(CVx = numeric(),
CVy = numeric(),
rho = numeric(),
n = numeric(),
estimator = character(),
mse = numeric(),
bias = numeric())
# loop over all combinations of parameters and estimators
for (i in 1:length(CVx)) {
for (j in 1:length(CVy)) {
for (k in 1:length(rho)) {
# Generate finite population
Z1  <- rnorm(N, 0, 1) ; Z2 <- rnorm(N, 0, 1)
X   <- CVx[i]*mx*Z1 + mx
Y   <- rho[k]*CVy[j]*my*Z1 + CVy[j]*my*sqrt(1-rho[k]^2)*Z2 + my
pop <- cbind(X,Y) #finite population of N pairs
mx.1 <- mean(X) ; my.1 <- mean(Y) ; rho.1 <- cor(X, Y)
CVy.1 <- sd(Y) / my.1 ; CVx.1 <- sd(X) / mx.1
w_star <- 1-(rho.1*CVy.1/CVx.1)
for (l in 1:length(n)) {
y_se <- NULL
y_ratio <- NULL
y_comp_est <- NULL
y_comp_star <- NULL
for (s in 1:nreps) {
# generate simulated data
r = 5 ; m = n[i]/r
rss.x <- as.vector(rss(X, m=m, r=r))
rss.y <- NULL
for (u in 1:length(rss.x)){
rss.y[u] <- Y[X==rss.x[u]]
}
samp <- data.frame(X=rss.x, Y=rss.y)
x <- samp$X ; y <- samp$Y
rho.hat <- cor(x, y)
cv.y <- sd(y)/mean(y) ; cv.x <- sd(x)/mean(x)
# calculate simple expansion estimator
y_se[s] <- mean(y)
# calculate ratio estimator
y_ratio[s] <- (mean(y)/mean(x))*mx.1
# calculate composite estimator with estimated optimal weight
w_hat <- 1-(rho.hat*cv.y/cv.x)
y_comp_est[s] <- w_hat*y_se[s] + (1-w_hat)*y_ratio[s]
# calculate composite estimator with known optimal weight
y_comp_star[s] <- w_star*y_se[s] + (1-w_star)*y_ratio[s]
}
# calculate MSE and bias for each estimator
mse_se <- mean((my.1 - y_se)^2)
mse_se_rel <- mse_se / mse_se
bias_se <- mean(my.1 - y_se)   # format
mse_ratio <- mean((my.1 - y_ratio)^2)
mse_ratio_rel <- mse_ratio / mse_se
bias_ratio <- mean(my.1 - y_ratio)
mse_comp_est <- mean((my.1 - y_comp_est)^2)
mse_comp_est_rel <- mse_comp_est / mse_se
bias_comp_est <- mean(my.1 - y_comp_est)
mse_comp_star <- mean((my.1 - y_comp_star)^2)
mse_comp_star_rel <- mse_comp_star / mse_se
bias_comp_star <- mean(my.1 - y_comp_star)
# Calculate w* and the variance of the composite estimator
r <- cor(Y, Yr)
w_star <- (var(Yr) - r * CVy * CVx) / (var(Y) + var(Yr) - 2 * r * CVy * CVx)
w_star <- ifelse(w_star < 0, 0, w_star)
w_star <- ifelse(w_star > 1, 1, w_star)
var_C <- (var(Y) * var(Yr) - (r * CVy * CVx)^2) / (var(Y) + var(Yr) - 2 * r * CVy * CVx)
# store the results
results<- rbind(results, data.frame(CVx = CVx[i],
CVy = CVy[j],
rho = rho[k],
n = n[l],
estimator = "simple expansion",
mse = mse_se, bias = bias_se*N,
mse.rel = mse_se_rel))
results <- rbind(results, data.frame(CVx = CVx[i],
CVy = CVy[j],
rho = rho[k],
n = n[l],
estimator = "ratio",
mse = mse_ratio, bias = bias_ratio*N,
mse.rel = mse_ratio_rel))
results <- rbind(results, data.frame(CVx = CVx[i],
CVy = CVy[j],
rho = rho[k],
n = n[l],
estimator = "composite (estimated weight)",
mse = mse_comp_est, bias = bias_comp_est*N,
mse.rel = mse_comp_est_rel))
results <- rbind(results, data.frame(CVx = CVx[i],
CVy = CVy[j],
rho = rho[k],
n = n[l],
estimator = "composite (known weight)",
mse = mse_comp_star,
bias = bias_comp_star*N,
mse.rel = mse_comp_star_rel))
results <- rbind(results, data.frame(CVx = CVx[i],
CVy = CVy[j],
rho = rho[k],
n = n[l],
estimator = "Composite Estimator with Optimal Weight",
mse = mse_w_star,
bias = bias_w_star))
}
}
}
}
