hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[7])) #Reads the submission
}
}
temp_dat = c(name, hash)
dat = rbind(dat, temp_dat)
}
row.names(dat) = NULL
colnames(dat) = c("Username","hash")
dat = as.data.frame(dat)
View(dat)
library(learnr)
library(gradethis)
library(learnrhash)
library(tidyverse)
listfile <- list.files(pattern = "txt",full.names = T, recursive = TRUE)
listfile
dat = c()
n = length(listfile)
x1 = file(listfile[4],"r")
readLines(x1)
for(i in 1:n){
x1 = file(listfile[i],"r")
r_line = readLines(x1)
name = sub("\\).*", "", sub(".*\\(", "", r_line[1])) #Reads the first line
if (i %in% c(6,7)){#For students that dont put the hash in the right spot
hash = r_line[10] #Reads the comments
}
else{
if(i %in% c(100)){
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[8])) #For submissions with weird inline code
}
else{
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[7])) #Reads the submission
}
}
temp_dat = c(name, hash)
dat = rbind(dat, temp_dat)
}
row.names(dat) = NULL
colnames(dat) = c("Username","hash")
dat = as.data.frame(dat)
score = c()
for (i in 1:nrow(dat)) {
score[i] = learnrhash::decode_obj(dat$hash[i])%>%
filter(correct == "TRUE")%>%
summarise(score = round(n()/13*20,2))%>%
pull(score)
}
score
dat = cbind(dat, score)
dat = dat %>% select(Username, score)%>%mutate(score = ifelse(is.nan(score), 0, score))
dat
library(learnr)
library(gradethis)
library(learnrhash)
library(tidyverse)
listfile <- list.files(pattern = "txt",full.names = T, recursive = TRUE)
listfile
dat = c()
n = length(listfile)
x1 = file(listfile[4],"r")
readLines(x1)
for(i in 1:n){
x1 = file(listfile[i],"r")
r_line = readLines(x1)
name = sub("\\).*", "", sub(".*\\(", "", r_line[1])) #Reads the first line
if (i %in% c(6,7)){#For students that dont put the hash in the right spot
hash = r_line[10] #Reads the comments
}
else{
if(i %in% c(100)){
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[8])) #For submissions with weird inline code
}
else{
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[7])) #Reads the submission
}
}
temp_dat = c(name, hash)
dat = rbind(dat, temp_dat)
}
row.names(dat) = NULL
colnames(dat) = c("Username","hash")
dat = as.data.frame(dat)
score = c()
for (i in 1:nrow(dat)) {
score[i] = learnrhash::decode_obj(dat$hash[i])%>%
filter(correct == "TRUE")%>%
summarise(score = round(n()/6*20,2))%>%
pull(score)
}
score
dat = cbind(dat, score)
dat = dat %>% select(Username, score)%>%mutate(score = ifelse(is.nan(score), 0, score))
dat
library(learnr)
library(gradethis)
library(learnrhash)
library(tidyverse)
listfile <- list.files(pattern = "txt",full.names = T, recursive = TRUE)
listfile
dat = c()
n = length(listfile)
x1 = file(listfile[4],"r")
readLines(x1)
for(i in 1:n){
x1 = file(listfile[i],"r")
r_line = readLines(x1)
name = sub("\\).*", "", sub(".*\\(", "", r_line[1])) #Reads the first line
if (i %in% c(6,7)){#For students that dont put the hash in the right spot
hash = r_line[10] #Reads the comments
}
else{
if(i %in% c(100)){
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[8])) #For submissions with weird inline code
}
else{
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[7])) #Reads the submission
}
}
temp_dat = c(name, hash)
dat = rbind(dat, temp_dat)
}
row.names(dat) = NULL
colnames(dat) = c("Username","hash")
dat = as.data.frame(dat)
score = c()
decode_obj(dat$hash[7])
decode_obj(dat$hash[1])
decode_obj(dat$hash[10])
1/6*20
library(learnr)
library(gradethis)
library(learnrhash)
library(tidyverse)
listfile <- list.files(pattern = "txt",full.names = T, recursive = TRUE)
listfile
dat = c()
n = length(listfile)
x1 = file(listfile[4],"r")
readLines(x1)
for(i in 1:n){
x1 = file(listfile[i],"r")
r_line = readLines(x1)
name = sub("\\).*", "", sub(".*\\(", "", r_line[1])) #Reads the first line
if (i %in% c(6,7)){#For students that dont put the hash in the right spot
hash = r_line[10] #Reads the comments
}
else{
if(i %in% c(100)){
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[8])) #For submissions with weird inline code
}
else{
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[7])) #Reads the submission
}
}
temp_dat = c(name, hash)
dat = rbind(dat, temp_dat)
}
row.names(dat) = NULL
colnames(dat) = c("Username","hash")
dat = as.data.frame(dat)
score = c()
decode_obj(dat$hash[10])
for (i in 1:nrow(dat)) {
score[i] = learnrhash::decode_obj(dat$hash[i])%>%
filter(correct == "TRUE")%>%
summarise(score = round(n()/6*20,2))%>%
pull(score)
}
score
dat = cbind(dat, score)
dat = dat %>% select(Username, score)%>%mutate(score = ifelse(is.nan(score), 0, score))
dat
RA10 <- read_csv("gc_MATH224007.202220_column_2022-01-23-19-53-03.csv")
RA10 = left_join(RA10, dat, by = "Username")
RA10 = RA10%>%
mutate(`(RA1) Reading Assignment #1 [Total Pts: 20 Score] |1672899` = score)%>%
select(-score)
write.csv(RA10, "MATH224001 Dr.Mostafa - RA10.csv", row.names = F)
library(learnr)
library(gradethis)
library(learnrhash)
library(tidyverse)
listfile <- list.files(pattern = "txt",full.names = T, recursive = TRUE)
listfile
dat = c()
n = length(listfile)
x1 = file(listfile[6],"r")
readLines(x1)
for(i in 1:n){
x1 = file(listfile[i],"r")
r_line = readLines(x1)
name = sub("\\).*", "", sub(".*\\(", "", r_line[1])) #Reads the first line
if (i %in% c(100)){#For students that dont put the hash in the right spot
hash = r_line[10] #Reads the comments
}
else{
if(i %in% c(100)){
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[8])) #For submissions with weird inline code
}
else{
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[7])) #Reads the submission
}
}
temp_dat = c(name, hash)
dat = rbind(dat, temp_dat)
}
row.names(dat) = NULL
colnames(dat) = c("Username","hash")
dat = as.data.frame(dat)
dat = c()
n = length(listfile)
x1 = file(listfile[6],"r")
readLines(x1)
for(i in 1:n){
x1 = file(listfile[i],"r")
r_line = readLines(x1)
name = sub("\\).*", "", sub(".*\\(", "", r_line[1])) #Reads the first line
if (i %in% c(3,8,9,12,15)){#For students that dont put the hash in the right spot
hash = r_line[10] #Reads the comments
}
else{
if(i %in% c(100)){
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[8])) #For submissions with weird inline code
}
else{
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[7])) #Reads the submission
}
}
temp_dat = c(name, hash)
dat = rbind(dat, temp_dat)
}
row.names(dat) = NULL
colnames(dat) = c("Username","hash")
dat = as.data.frame(dat)
dat = c()
n = length(listfile)
x1 = file(listfile[6],"r")
readLines(x1)
for(i in 1:n){
x1 = file(listfile[i],"r")
r_line = readLines(x1)
name = sub("\\).*", "", sub(".*\\(", "", r_line[1])) #Reads the first line
if (i %in% c(1,3,8,9,12,15)){#For students that dont put the hash in the right spot
hash = r_line[10] #Reads the comments
}
else{
if(i %in% c(100)){
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[8])) #For submissions with weird inline code
}
else{
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[7])) #Reads the submission
}
}
temp_dat = c(name, hash)
dat = rbind(dat, temp_dat)
}
row.names(dat) = NULL
colnames(dat) = c("Username","hash")
dat = as.data.frame(dat)
dat = c()
n = length(listfile)
x1 = file(listfile[6],"r")
readLines(x1)
for(i in 1:n){
x1 = file(listfile[i],"r")
r_line = readLines(x1)
name = sub("\\).*", "", sub(".*\\(", "", r_line[1])) #Reads the first line
if (i %in% c(3,8,9,12,15)){#For students that dont put the hash in the right spot
hash = r_line[10] #Reads the comments
}
else{
if(i %in% c(1)){
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[8])) #For submissions with weird inline code
}
else{
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[7])) #Reads the submission
}
}
temp_dat = c(name, hash)
dat = rbind(dat, temp_dat)
}
row.names(dat) = NULL
colnames(dat) = c("Username","hash")
dat = as.data.frame(dat)
x1 = file(listfile[1],"r")
readLines(x1)
listfile <- list.files(pattern = "txt",full.names = T, recursive = TRUE)
listfile
dat = c()
n = length(listfile)
x1 = file(listfile[1],"r")
readLines(x1)
for(i in 1:n){
x1 = file(listfile[i],"r")
r_line = readLines(x1)
name = sub("\\).*", "", sub(".*\\(", "", r_line[1])) #Reads the first line
if (i %in% c(3,8,9,12,15)){#For students that dont put the hash in the right spot
hash = r_line[10] #Reads the comments
}
else{
if(i %in% c(100)){
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[8])) #For submissions with weird inline code
}
else{
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[7])) #Reads the submission
}
}
temp_dat = c(name, hash)
dat = rbind(dat, temp_dat)
}
row.names(dat) = NULL
colnames(dat) = c("Username","hash")
dat = as.data.frame(dat)
dat = dat[-1,]
score = c()
decode_obj(dat$hash[10])
for (i in 1:nrow(dat)) {
score[i] = learnrhash::decode_obj(dat$hash[i])%>%
filter(correct == "TRUE")%>%
summarise(score = round(n()/12*20,2))%>%
pull(score)
}
score
dat = cbind(dat, score)
dat = dat %>% select(Username, score)%>%mutate(score = ifelse(is.nan(score), 0, score))
dat
dat = c()
n = length(listfile)
x1 = file(listfile[1],"r")
readLines(x1)
for(i in 1:n){
x1 = file(listfile[i],"r")
r_line = readLines(x1)
name = sub("\\).*", "", sub(".*\\(", "", r_line[1])) #Reads the first line
if (i %in% c(3,8,9,12,15)){#For students that dont put the hash in the right spot
hash = r_line[10] #Reads the comments
}
else{
if(i %in% c(100)){
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[8])) #For submissions with weird inline code
}
else{
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[7])) #Reads the submission
}
}
temp_dat = c(name, hash)
dat = rbind(dat, temp_dat)
}
row.names(dat) = NULL
colnames(dat) = c("Username","hash")
dat = as.data.frame(dat)
dat = dat[-1,] #Student had no submission
score = c()
decode_obj(dat$hash[13])
decode_obj(dat$hash[12])
5/12*20
decode_obj(dat$hash[11])
7/12*20
decode_obj(dat$hash[3])
8/12*20
listfile <- list.files(pattern = "txt",full.names = T, recursive = TRUE)
listfile
dat = c()
n = length(listfile)
x1 = file(listfile[1],"r")
readLines(x1)
for(i in 1:n){
x1 = file(listfile[i],"r")
r_line = readLines(x1)
name = sub("\\).*", "", sub(".*\\(", "", r_line[1])) #Reads the first line
if (i %in% c(3,8,9,12,15)){#For students that dont put the hash in the right spot
hash = r_line[10] #Reads the comments
}
else{
if(i %in% c(100)){
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[8])) #For submissions with weird inline code
}
else{
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[7])) #Reads the submission
}
}
temp_dat = c(name, hash)
dat = rbind(dat, temp_dat)
}
row.names(dat) = NULL
colnames(dat) = c("Username","hash")
dat = as.data.frame(dat)
dat = dat[-1,] #Student had no submission
score = c()
decode_obj(dat$hash[3])
for (i in 1:nrow(dat)) {
score[i] = learnrhash::decode_obj(dat$hash[i])%>%
filter(correct == "TRUE")%>%
summarise(score = round(n()/12*20,2))%>%
pull(score)
}
score
dat = cbind(dat, score)
dat = dat %>% select(Username, score)%>%mutate(score = ifelse(is.nan(score), 0, score))
dat
RA11 <- read_csv("gc_MATH224007.202220_column_2022-01-23-19-53-03.csv")
RA11 = left_join(RA11, dat, by = "Username")
RA11 = RA11%>%
mutate(`(RA1) Reading Assignment #1 [Total Pts: 20 Score] |1672899` = score)%>%
select(-score)
write.csv(RA11, "MATH224001 Dr.Mostafa - RA11.csv", row.names = F)
library(learnr)
library(gradethis)
library(learnrhash)
library(tidyverse)
listfile <- list.files(pattern = "txt",full.names = T, recursive = TRUE)
listfile
dat = c()
n = length(listfile)
x1 = file(listfile[1],"r")
readLines(x1)
for(i in 1:n){
x1 = file(listfile[i],"r")
r_line = readLines(x1)
name = sub("\\).*", "", sub(".*\\(", "", r_line[1])) #Reads the first line
if (i %in% c(100)){#For students that dont put the hash in the right spot
hash = r_line[10] #Reads the comments
}
else{
if(i %in% c(100)){
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[8])) #For submissions with weird inline code
}
else{
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[7])) #Reads the submission
}
}
temp_dat = c(name, hash)
dat = rbind(dat, temp_dat)
}
row.names(dat) = NULL
colnames(dat) = c("Username","hash")
dat = as.data.frame(dat)
dat = c()
n = length(listfile)
x1 = file(listfile[1],"r")
readLines(x1)
for(i in 1:n){
x1 = file(listfile[i],"r")
r_line = readLines(x1)
name = sub("\\).*", "", sub(".*\\(", "", r_line[1])) #Reads the first line
if (i %in% c(8,9)){#For students that dont put the hash in the right spot
hash = r_line[10] #Reads the comments
}
else{
if(i %in% c(100)){
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[8])) #For submissions with weird inline code
}
else{
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[7])) #Reads the submission
}
}
temp_dat = c(name, hash)
dat = rbind(dat, temp_dat)
}
row.names(dat) = NULL
colnames(dat) = c("Username","hash")
dat = as.data.frame(dat)
x1 = file(listfile[14],"r")
readLines(x1)
x1 = file(listfile[15],"r")
readLines(x1)
dat = c()
n = length(listfile)
x1 = file(listfile[15],"r")
readLines(x1)
for(i in 1:n){
x1 = file(listfile[i],"r")
r_line = readLines(x1)
name = sub("\\).*", "", sub(".*\\(", "", r_line[1])) #Reads the first line
if (i %in% c(8,9)){#For students that dont put the hash in the right spot
hash = r_line[10] #Reads the comments
}
else{
if(i %in% c(100)){
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[8])) #For submissions with weird inline code
}
else{
hash = sub("\\.*</pre>", "", sub(".*\\id=\"hash_output\">", "", r_line[7])) #Reads the submission
}
}
temp_dat = c(name, hash)
dat = rbind(dat, temp_dat)
}
row.names(dat) = NULL
colnames(dat) = c("Username","hash")
dat = as.data.frame(dat)
dat[14,2] = "QlpoOTFBWSZTWV883AcAAiJ/yf//6zhYf3/3KwOOQP/v/+FAAIAQAAgAQdADfpIlAKBCUSGmiZGmqeTRpH6k9T1A9qjDQCabU9R6MU08p5Qeoep5Qc0xGRk0yaAZDRkMmQAAAyNMjQMIZBzTEZGTTJoBkNGQyZAAADI0yNAwhkHNMRkZNMmgGQ0ZDJkAAAMjTI0DCGQJEhNAUxNMNRpTajQeoNMgHpAANNAaNPKeSFOxRLVRNGEia0ZUoa4KSUNShQBNjYH8MPp0+qAnaXDvmiYoILNKiBxrs6tLwAI5SzYy52QLUgn0DxXViwfd0Fkiv2HoVbmqMtNj8kk8qiOzyBOhQqIgoITBC9JtgoTEAa2kkHkfDg/chSO3XI/yyiSL3c0lnqDkC5sZAQrQ0htBnjAmbn+gPxP9mC5gi7Vq9YRKGJUEe4K3YE+sMQMhDg8Tu3cbLCGAKr38ZBG0T7P02531tuB3Rs8tYNQR0KRhFhBAsEhkDfA4gHHg0c9IV9x5L5cI8c0l3z0eOHKNAWgA/GFf4Z8dXPcVYqnr1uAx+8C0C2yvEywbcyHFNAwMaQBE9NIvgVlgWYeShdGEOtk2EVjCTmyFkoFP0xY8eTw0AOFdX6cmlAaBh23Q/IXgusCkUlCYoGvYc3TynuvGwMHXz+A7QoFPb7gYZQj+qzKXB+FfhaT8EzxI15dV3WGj3pEB/PYGkGrVERzuSJIrzVS8rQ2O8I+DgHmkYUC6wuMA1bS0PH2ioiYXWoN2T6oR9oDMI4w4S3FJyaOJhz5lRg7LQlaw5WF6PQjlWRg9SyDfo1BJELb+qMdm+oYr45kiZv37QeaDIMdEzPugM9+bLc3qRE80u9ainFLGVv1ovlhnQOsmE3RGfNszvTCgTdj18+2ExsLocDIbJPvZBYbq7LNmalrRaHKFQuAFkC3m/Yxdqu/u8iOCa1KiK0vU64ZgyxMYoxC7aqP7gou60OhGU7GE7CBhoFTgbkUR6kRzrMbJBN4eesjgovZ4ZBgl00kdK06GMGaWno78xEwwxRacuPRWvpkuyZPcYhklP1njsoGhljdm0ESn0BvRx4vV1T478DiJtZBrLG++FxPTU5WSlFyJX2+bxVociyRXZEK4sRySDALQp6JhNHSD68wz9pb3vDFH+rG/mRilaLSgyasD34ntsZJGGCGJikFGY1e8P8qi/8XckU4UJBfPNwHA"
dat[15,2] = "QlpoOTFBWSZTWWrvQhQAAc3/xf//yyhYb3/2KQEOQP/n/+FAAAEAAAgAQcACmHHXbZtOCUiCekmyamnkzUQA0yGTIMTQ0A0aYJoBKJpNGhT0j0NQaAaAAAAAAAaAJFEmmUNMBGmmjQAAAABoaNNBoASiJok2mptTaZR6aahoGhoA0yBoxAAaaFDEQdVUBtrHUlOlISSOtGMQbUYqCCRptGBnPpyYLsK9GL7abnBUxkIUhBuM/OPBFJCJmrNlXr9eMryJaz9CJWcHQMM08u9XjfeXRmqzMUCoi4wE0JDEhZ0FBCSpsQg73bWzdLhIsnFLFAUJoIVgsCKQBATEgpfAsuynT0OdqYHsPOIl8zHaNK6mEuffc8HpYlH72e3CfBZqWjrEQumQnAnAfMrhlUjrtThMdORltqrrTxOysAfoALy2riygQD0NQBveBVAcb5FrO6RRgGUBzlZAcZAGhB0jniRoonhamhBUc4aqKgLEGPyQIcXmgOAwftJ7mwUsNkaMFBYoaW2YeTjSB77ITEuxrD6fcGMTu0xoOcyaDloERm1FIpaLysgxcgIRLth5MQeUxqriWYBJEekZkK6V42B1BGUDBrYlEzTFoUHPPo1ORU0DOhOlYgWNJCMUREu6hsNolmqQDpNNITiQm815G0iUHBbKi/d+SjpHkrPITRsJB0dir7KwUTrUilKHNyE2mNfqlRB8mKCUQoMXB+rYhAKbdCC0Hz9YJagw1jlW2ej5E0CdhrzBSISYkHgpZRKMGrMPwKXWkIKa6aNZFFitsRGJpyUuxnvzTZx0sNiYSDZq0vKhSsEvFxC19xnnJFS7WV5ZEfVKjnTJHx1XyGYUkLapIsSB+MMl89/bHTWVy0v1UbaMZGaVBWDdhGSCJ50wYWjKw6Dve0D+bH/i7kinChINXehCgA=="
score = c()
decode_obj(dat$hash[3])
for (i in 1:nrow(dat)) {
score[i] = learnrhash::decode_obj(dat$hash[i])%>%
filter(correct == "TRUE")%>%
summarise(score = round(n()/5*20,2))%>%
pull(score)
}
score
dat = cbind(dat, score)
dat = dat %>% select(Username, score)%>%mutate(score = ifelse(is.nan(score), 0, score))
dat
RA12 <- read_csv("gc_MATH224007.202220_column_2022-01-23-19-53-03.csv")
RA12 = left_join(RA12, dat, by = "Username")
RA12 = RA12%>%
mutate(`(RA1) Reading Assignment #1 [Total Pts: 20 Score] |1672899` = score)%>%
select(-score)
write.csv(RA12, "MATH224001 Dr.Mostafa - RA12.csv", row.names = F)
