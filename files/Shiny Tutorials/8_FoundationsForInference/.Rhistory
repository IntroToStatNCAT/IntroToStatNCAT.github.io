qnorm(0.975)-qnorm(0.025)
#knitr::opts_chunk$set(eval = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(learnr)
library(openintro)
library(gradethis) #remotes::install_github("rstudio/gradethis")
library(learnrhash) #devtools::install_github("rundel/learnrhash")
tutorial_options(exercise.timelimit = 60, exercise.checker = gradethis::grade_learnr)
#knitr::opts_chunk$set(eval = FALSE)
pop_size <- 250000000
possible_entries_solar <- c(rep("support", 0.88 * pop_size),
rep("not", 0.12 * pop_size))
sampled_entries <- sample(possible_entries_solar,
size = 1000, replace = F)
sum(sampled_entries == "support")/1000
sampled_entries <- sample(possible_entries_solar,
size = 1000, replace = F)
sum(sampled_entries == "support")/1000
sampled_entries <- sample(possible_entries_solar,
size = 1000, replace = F)
sum(sampled_entries == "support")/1000
set.seed(123)
# Creating 10000 different sample proportions
phat <- rep(NA, 10000)
for(i in 1:10000){
sampled_entries <- sample(possible_entries_solar, size = 1000, replace = F)
phat[i] <- sum(sampled_entries == "support") / 1000
}
sampling <- tibble(phat = phat)
# Plot
ggplot(sampling, aes(x = phat)) +
geom_histogram(aes(y=..density..),bins = 40,col = "black", fill = "lightblue") +
geom_vline(xintercept = 0.88, col = "red")+
theme_minimal(base_size = 14) +
labs(x = "Sample proportions", y = "Frequency")+
stat_function(fun = dnorm, args = list(mean = mean(phat), sd = sd(phat)), size = 1.2)
install.packages("broom")
#knitr::opts_chunk$set(eval = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(learnr)
library(broom)
library(knitr)
library(infer)
library(emo)
library(openintro)
library(gradethis) #remotes::install_github("rstudio/gradethis")
library(learnrhash) #devtools::install_github("rundel/learnrhash")
#knitr::opts_chunk$set(eval = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(learnr)
library(broom)
library(knitr)
library(infer)
library(emo)
library(openintro)
library(gradethis) #remotes::install_github("rstudio/gradethis")
library(learnrhash) #devtools::install_github("rundel/learnrhash")
tutorial_options(exercise.timelimit = 60, exercise.checker = gradethis::grade_learnr)
# data prep --------------------------------------------------------------------
# load data
gss <- read_rds("data/gss-sampled.rds")
gss2016 <- read_rds("data/gss-sampled-2016.rds")
gss2016_small <- read_rds("data/gss2016-n50.rds")
gss2016_smaller <- read_rds("data/gss2016-n10.rds")
# recode
gss2016 <- gss2016 %>%
mutate(consci = if_else(consci == 1, "Low", "High"))
# objects to be used later
p_hat_happy <- gss2016 %>%
summarize(prop_happy = mean(happy == "HAPPY")) %>%
pull()
p_hat_consci <- gss2016 %>%
summarize(prop_high = mean(consci == "High")) %>%
pull()
# happy
set.seed(47)
boot_dist_happy <- gss2016 %>%
specify(response = happy, success = "HAPPY") %>%
generate(reps = 500, type = "bootstrap") %>%
calculate(stat = "prop")
SE_happy <- boot_dist_happy %>%
summarize(se = sd(stat)) %>%
pull()
# consci, just one
set.seed(47)
boot_1_consci <- gss2016 %>%
specify(response = consci, success = "High") %>%
generate(reps = 1, type = "bootstrap")
# consci
set.seed(47)
boot_dist_consci <- gss2016 %>%
specify(response = consci, success = "High") %>%
generate(reps = 500, type = "bootstrap") %>%
calculate(stat = "prop")
SE_consci <- boot_dist_consci %>%
summarize(se = sd(stat)) %>%
pull()
#knitr::opts_chunk$set(eval = FALSE)
#knitr::opts_chunk$set(eval = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(learnr)
library(broom)
library(knitr)
library(infer)
library(emo)
library(openintro)
library(gradethis) #remotes::install_github("rstudio/gradethis")
library(learnrhash) #devtools::install_github("rundel/learnrhash")
tutorial_options(exercise.timelimit = 60, exercise.checker = gradethis::grade_learnr)
# data prep --------------------------------------------------------------------
# load data
gss <- read_rds("data/gss-sampled.rds")
gss2016 <- read_rds("data/gss-sampled-2016.rds")
gss2016_small <- read_rds("data/gss2016-n50.rds")
gss2016_smaller <- read_rds("data/gss2016-n10.rds")
# recode
gss2016 <- gss2016 %>%
mutate(consci = if_else(consci == 1, "Low", "High"))
# objects to be used later
p_hat_happy <- gss2016 %>%
summarize(prop_happy = mean(happy == "HAPPY")) %>%
pull()
p_hat_consci <- gss2016 %>%
summarize(prop_high = mean(consci == "High")) %>%
pull()
# happy
set.seed(47)
boot_dist_happy <- gss2016 %>%
specify(response = happy, success = "HAPPY") %>%
generate(reps = 500, type = "bootstrap") %>%
calculate(stat = "prop")
SE_happy <- boot_dist_happy %>%
summarize(se = sd(stat)) %>%
pull()
# consci, just one
set.seed(47)
boot_1_consci <- gss2016 %>%
specify(response = consci, success = "High") %>%
generate(reps = 1, type = "bootstrap")
# consci
set.seed(47)
boot_dist_consci <- gss2016 %>%
specify(response = consci, success = "High") %>%
generate(reps = 500, type = "bootstrap") %>%
calculate(stat = "prop")
SE_consci <- boot_dist_consci %>%
summarize(se = sd(stat)) %>%
pull()
#knitr::opts_chunk$set(eval = FALSE)
gss <- read_rds("data/gss-sampled.rds")
setwd("D:/A&T/GRA/Class Material/Shiny Tutorials/9_FoundationsForInference")
#knitr::opts_chunk$set(eval = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(learnr)
library(broom)
library(knitr)
library(infer)
library(emo)
library(openintro)
library(gradethis) #remotes::install_github("rstudio/gradethis")
library(learnrhash) #devtools::install_github("rundel/learnrhash")
tutorial_options(exercise.timelimit = 60, exercise.checker = gradethis::grade_learnr)
# data prep --------------------------------------------------------------------
# load data
gss <- read_rds("data/gss-sampled.rds")
gss2016 <- read_rds("data/gss-sampled-2016.rds")
gss2016_small <- read_rds("data/gss2016-n50.rds")
gss2016_smaller <- read_rds("data/gss2016-n10.rds")
# recode
gss2016 <- gss2016 %>%
mutate(consci = if_else(consci == 1, "Low", "High"))
# objects to be used later
p_hat_happy <- gss2016 %>%
summarize(prop_happy = mean(happy == "HAPPY")) %>%
pull()
p_hat_consci <- gss2016 %>%
summarize(prop_high = mean(consci == "High")) %>%
pull()
# happy
set.seed(47)
boot_dist_happy <- gss2016 %>%
specify(response = happy, success = "HAPPY") %>%
generate(reps = 500, type = "bootstrap") %>%
calculate(stat = "prop")
SE_happy <- boot_dist_happy %>%
summarize(se = sd(stat)) %>%
pull()
# consci, just one
set.seed(47)
boot_1_consci <- gss2016 %>%
specify(response = consci, success = "High") %>%
generate(reps = 1, type = "bootstrap")
# consci
set.seed(47)
boot_dist_consci <- gss2016 %>%
specify(response = consci, success = "High") %>%
generate(reps = 500, type = "bootstrap") %>%
calculate(stat = "prop")
SE_consci <- boot_dist_consci %>%
summarize(se = sd(stat)) %>%
pull()
#knitr::opts_chunk$set(eval = FALSE)
#knitr::opts_chunk$set(eval = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(learnr)
library(broom)
library(knitr)
library(infer)
library(emo)
library(openintro)
library(gradethis) #remotes::install_github("rstudio/gradethis")
library(learnrhash) #devtools::install_github("rundel/learnrhash")
tutorial_options(exercise.timelimit = 60, exercise.checker = gradethis::grade_learnr)
# data prep --------------------------------------------------------------------
# load data
gss <- read_rds("data/gss-sampled.rds")
gss2016 <- read_rds("data/gss-sampled-2016.rds")
gss2016_small <- read_rds("data/gss2016-n50.rds")
gss2016_smaller <- read_rds("data/gss2016-n10.rds")
View(gss2016_small)
write.csv(gss, "gss-sampled.csv",row.names = F)
write.csv(gss2016, "gss-sampled-2016.csv",row.names = F)
write.csv(gss2016_small, "gss2016-n50.csv",row.names = F)
write.csv(gss2016_smaller, "gss2016-n10.csv",row.names = F)
gss <- read_rds("data/gss-sampled.csv")
gss <- read_csv("data/gss-sampled.csv")
gss2016 <- read_csv("data/gss-sampled-2016.csv")
gss2016_small <- read_csv("data/gss2016-n50.csv")
gss2016_smaller <- read_csv("data/gss2016-n10.csv")
#knitr::opts_chunk$set(eval = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(learnr)
library(broom)
library(knitr)
library(infer)
library(emo)
library(openintro)
library(gradethis) #remotes::install_github("rstudio/gradethis")
library(learnrhash) #devtools::install_github("rundel/learnrhash")
# data prep --------------------------------------------------------------------
# load data
gss <- read_csv("gss-sampled.csv")
gss2016 <- read_csv("gss-sampled-2016.csv")
gss2016_small <- read_csv("gss2016-n50.csv")
gss2016_smaller <- read_csv("gss2016-n10.csv")
# recode
gss2016 <- gss2016 %>%
mutate(consci = if_else(consci == 1, "Low", "High"))
# objects to be used later
p_hat_happy <- gss2016 %>%
summarize(prop_happy = mean(happy == "HAPPY")) %>%
pull()
p_hat_consci <- gss2016 %>%
summarize(prop_high = mean(consci == "High")) %>%
pull()
# happy
set.seed(47)
boot_dist_happy <- gss2016 %>%
specify(response = happy, success = "HAPPY") %>%
generate(reps = 500, type = "bootstrap") %>%
calculate(stat = "prop")
SE_happy <- boot_dist_happy %>%
summarize(se = sd(stat)) %>%
pull()
# consci, just one
set.seed(47)
boot_1_consci <- gss2016 %>%
specify(response = consci, success = "High") %>%
generate(reps = 1, type = "bootstrap")
# consci
set.seed(47)
boot_dist_consci <- gss2016 %>%
specify(response = consci, success = "High") %>%
generate(reps = 500, type = "bootstrap") %>%
calculate(stat = "prop")
SE_consci <- boot_dist_consci %>%
summarize(se = sd(stat)) %>%
pull()
#knitr::opts_chunk$set(eval = FALSE)
#knitr::opts_chunk$set(eval = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(learnr)
library(broom)
library(knitr)
library(infer)
library(emo)
library(openintro)
library(gradethis) #remotes::install_github("rstudio/gradethis")
library(learnrhash) #devtools::install_github("rundel/learnrhash")
# data prep --------------------------------------------------------------------
# load data
gss <- read_csv("gss-sampled.csv")
gss2016 <- read_csv("gss-sampled-2016.csv")
gss2016_small <- read_csv("gss2016-n50.csv")
gss2016_smaller <- read_csv("gss2016-n10.csv")
# recode
gss2016 <- gss2016 %>%
mutate(consci = if_else(consci == 1, "Low", "High"))
# objects to be used later
p_hat_happy <- gss2016 %>%
summarize(prop_happy = mean(happy == "HAPPY")) %>%
pull()
p_hat_consci <- gss2016 %>%
summarize(prop_high = mean(consci == "High")) %>%
pull()
# happy
set.seed(47)
boot_dist_happy <- gss2016 %>%
specify(response = happy, success = "HAPPY") %>%
generate(reps = 500, type = "bootstrap") %>%
calculate(stat = "prop")
SE_happy <- boot_dist_happy %>%
summarize(se = sd(stat)) %>%
pull()
# consci, just one
set.seed(47)
boot_1_consci <- gss2016 %>%
specify(response = consci, success = "High") %>%
generate(reps = 1, type = "bootstrap")
# consci
set.seed(47)
boot_dist_consci <- gss2016 %>%
specify(response = consci, success = "High") %>%
generate(reps = 500, type = "bootstrap") %>%
calculate(stat = "prop")
SE_consci <- boot_dist_consci %>%
summarize(se = sd(stat)) %>%
pull()
#knitr::opts_chunk$set(eval = FALSE)
#knitr::opts_chunk$set(eval = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(learnr)
library(broom)
library(knitr)
library(infer)
library(emo)
library(openintro)
library(gradethis) #remotes::install_github("rstudio/gradethis")
library(learnrhash) #devtools::install_github("rundel/learnrhash")
# data prep --------------------------------------------------------------------
# load data
gss <- read.csv("https://github.com/IntroToStatNCAT/Lab_FoundationsForInference/blob/main/gss-sampled.csv")
gss2016 <- read.csv("https://github.com/IntroToStatNCAT/Lab_FoundationsForInference/blob/main/gss-sampled-2016.csv")
gss2016_small <- read.csv("https://github.com/IntroToStatNCAT/Lab_FoundationsForInference/blob/main/gss2016-n50.csv")
gss2016_smaller <- read.csv("https://github.com/IntroToStatNCAT/Lab_FoundationsForInference/blob/main/gss2016-n10.csv")
# recode
gss2016 <- gss2016 %>%
mutate(consci = if_else(consci == 1, "Low", "High"))
# objects to be used later
p_hat_happy <- gss2016 %>%
summarize(prop_happy = mean(happy == "HAPPY")) %>%
pull()
p_hat_consci <- gss2016 %>%
summarize(prop_high = mean(consci == "High")) %>%
pull()
# happy
set.seed(47)
boot_dist_happy <- gss2016 %>%
specify(response = happy, success = "HAPPY") %>%
generate(reps = 500, type = "bootstrap") %>%
calculate(stat = "prop")
SE_happy <- boot_dist_happy %>%
summarize(se = sd(stat)) %>%
pull()
# consci, just one
set.seed(47)
boot_1_consci <- gss2016 %>%
specify(response = consci, success = "High") %>%
generate(reps = 1, type = "bootstrap")
# consci
set.seed(47)
boot_dist_consci <- gss2016 %>%
specify(response = consci, success = "High") %>%
generate(reps = 500, type = "bootstrap") %>%
calculate(stat = "prop")
SE_consci <- boot_dist_consci %>%
summarize(se = sd(stat)) %>%
pull()
#knitr::opts_chunk$set(eval = FALSE)
View(gss2016)
install.packages("RCurl")
#knitr::opts_chunk$set(eval = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(learnr)
library(broom)
library(knitr)
library(infer)
library(emo)
library(RCurl)
library(openintro)
library(gradethis) #remotes::install_github("rstudio/gradethis")
library(learnrhash) #devtools::install_github("rundel/learnrhash")
# data prep --------------------------------------------------------------------
# load data
gss <- read.csv(geturl("https://github.com/IntroToStatNCAT/Lab_FoundationsForInference/blob/main/gss-sampled.csv"))
gss2016 <- read.csv(geturl("https://github.com/IntroToStatNCAT/Lab_FoundationsForInference/blob/main/gss-sampled-2016.csv"))
gss2016_small <- read.csv(geturl("https://github.com/IntroToStatNCAT/Lab_FoundationsForInference/blob/main/gss2016-n50.csv"))
gss2016_smaller <- read.csv(geturl("https://github.com/IntroToStatNCAT/Lab_FoundationsForInference/blob/main/gss2016-n10.csv"))
# recode
gss2016 <- gss2016 %>%
mutate(consci = if_else(consci == 1, "Low", "High"))
# objects to be used later
p_hat_happy <- gss2016 %>%
summarize(prop_happy = mean(happy == "HAPPY")) %>%
pull()
p_hat_consci <- gss2016 %>%
summarize(prop_high = mean(consci == "High")) %>%
pull()
# happy
set.seed(47)
boot_dist_happy <- gss2016 %>%
specify(response = happy, success = "HAPPY") %>%
generate(reps = 500, type = "bootstrap") %>%
calculate(stat = "prop")
SE_happy <- boot_dist_happy %>%
summarize(se = sd(stat)) %>%
pull()
# consci, just one
set.seed(47)
boot_1_consci <- gss2016 %>%
specify(response = consci, success = "High") %>%
generate(reps = 1, type = "bootstrap")
# consci
set.seed(47)
boot_dist_consci <- gss2016 %>%
specify(response = consci, success = "High") %>%
generate(reps = 500, type = "bootstrap") %>%
calculate(stat = "prop")
SE_consci <- boot_dist_consci %>%
summarize(se = sd(stat)) %>%
pull()
#knitr::opts_chunk$set(eval = FALSE)
gss <- read.csv(url("https://github.com/IntroToStatNCAT/Lab_FoundationsForInference/blob/main/gss-sampled.csv"))
gss2016 <- read.csv(url("https://github.com/IntroToStatNCAT/Lab_FoundationsForInference/blob/main/gss-sampled-2016.csv"))
gss2016_small <- read.csv(url("https://github.com/IntroToStatNCAT/Lab_FoundationsForInference/blob/main/gss2016-n50.csv"))
gss2016_smaller <- read.csv(url("https://github.com/IntroToStatNCAT/Lab_FoundationsForInference/blob/main/gss2016-n10.csv"))
gss2016 <- gss2016 %>%
mutate(consci = if_else(consci == 1, "Low", "High"))
install.packages("curl")
install.packages("curl")
install.packages("curl")
library(curl)
gss <- read.csv(curl("https://github.com/IntroToStatNCAT/Lab_FoundationsForInference/blob/main/gss-sampled.csv"))
gss2016 <- read.csv(curl("https://github.com/IntroToStatNCAT/Lab_FoundationsForInference/blob/main/gss-sampled-2016.csv"))
gss2016_small <- read.csv(curl("https://github.com/IntroToStatNCAT/Lab_FoundationsForInference/blob/main/gss2016-n50.csv"))
gss2016_smaller <- read.csv(curl("https://github.com/IntroToStatNCAT/Lab_FoundationsForInference/blob/main/gss2016-n10.csv"))
gss2016 <- gss2016 %>%
mutate(consci = if_else(consci == 1, "Low", "High"))
#knitr::opts_chunk$set(eval = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(learnr)
library(broom)
library(knitr)
library(infer)
library(emo)
library(curl)
library(openintro)
library(gradethis) #remotes::install_github("rstudio/gradethis")
library(learnrhash)
gss2016 <- gss2016 %>%
mutate(consci = if_else(consci == 1, "Low", "High"))
gss <- read_csv("https://github.com/IntroToStatNCAT/Lab_FoundationsForInference/blob/main/gss-sampled.csv")
gss2016 <- gss2016 %>%
mutate(consci = if_else(consci == 1, "Low", "High"))
View(gss)
gss <- read.csv(url("https://raw.githubusercontent.com/IntroToStatNCAT/Lab_FoundationsForInference/main/gss-sampled.csv"))
gss2016 <- read.csv(url("https://raw.githubusercontent.com/IntroToStatNCAT/Lab_FoundationsForInference/main/gss-sampled-2016.csv"))
gss2016_small <- read.csv(url("https://raw.githubusercontent.com/IntroToStatNCAT/Lab_FoundationsForInference/main/gss2016-n50.csv"))
gss2016_smaller <- read.csv(url("https://raw.githubusercontent.com/IntroToStatNCAT/Lab_FoundationsForInference/main/gss2016-n10.csv"))
gss2016 <- gss2016 %>%
mutate(consci = if_else(consci == 1, "Low", "High"))
houses <- read.csv("https://raw.githubusercontent.com/NikhilKumarMutyala/Linear-Regression-from-scartch-on-KC-House-Dataset/master/kc_house_data.csv")
write.csv(houses, "houses.csv", row.names = F)
#knitr::opts_chunk$set(eval = FALSE)
library(dplyr)
library(ggplot2)
library(learnr)
library(gradethis)
library(gradethis) #remotes::install_github("rstudio/gradethis")
library(learnrhash) #devtools::install_github("rundel/learnrhash")
library(openintro)
library(gapminder)
library(emo) #devtools::install_github("hadley/emo")
set.seed(42)
#https://raw.githubusercontent.com/NikhilKumarMutyala/Linear-Regression-from-scartch-on-KC-House-Dataset/master/kc_house_data.csv
houses <- read.csv("https://raw.githubusercontent.com/IntroToStatNCAT/RA_IntroToData/main/houses.csv")
houses$exterior <- sample(c("brick", "vinyl siding", "shingles", "NA"), size = nrow(houses), prob = c(0.15, 0.7, 0.12, 0.03), replace = TRUE)
houses$month <- sample(1:12, size = nrow(houses), replace = TRUE)
housesSubset <- houses[ , c(1, 23, 3, 6, 7, 9, 22)]
#knitr::opts_chunk$set(exercise.checker = gradethis::grade_learnr)
